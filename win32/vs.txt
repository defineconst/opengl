    #version 400 core
    subroutine void PassProgram_();
    subroutine uniform PassProgram_ SubProgram_;
    //  矩阵/相机
    uniform vec3 camera_pos_;
    uniform vec3 camera_eye_;
    uniform mat4 matrix_mvp_;
    uniform mat4 matrix_mv_;
    uniform mat4 matrix_m_;
    uniform mat4 matrix_p_;
    uniform mat4 matrix_v_;
    uniform mat3 matrix_n_;
    //  光源
    #define LIGHT_TYPE_DIRECT_ 0
    #define LIGHT_TYPE_POINT_ 1
    #define LIGHT_TYPE_SPOT_ 2
    struct LightDirectParam_ {
        mat4 mMatrix;
        vec3 mNormal;
        vec3 mAmbient;
        vec3 mDiffuse;
        vec3 mSpecular;
        vec3 mPosition;
    };
    struct LightPointParam_ {
        float mFar, mNear;
        float mK0, mK1, mK2;
        vec3 mAmbient;
        vec3 mDiffuse;
        vec3 mSpecular;
        vec3 mPosition;
    };
    struct LightSpotParam_ {
        float mK0;
        float mK1;
        float mK2;
        float mInCone;
        float mOutCone;
        mat4 mMatrix;
        vec3 mNormal;
        vec3 mAmbient;
        vec3 mDiffuse;
        vec3 mSpecular;
        vec3 mPosition;
    };
    layout (std140) uniform LightDirect_ {
        LightDirectParam_ mParam[2];
    } light_direct_;
    layout (std140) uniform LightPoint_ {
        LightPointParam_ mParam[4];
    } light_point_;
    layout (std140) uniform LightSpot_ {
        LightSpotParam_ mParam[4];
    } light_spot_;
    uniform int light_count_direct_;
    uniform int light_count_point_;
    uniform int light_count_spot_;
    uniform int light_type_;
        layout(location = 0) in vec3 a_v_;
        layout(location = 1) in vec3 a_n_;
        layout(location = 2) in vec3 a_c_;
        layout(location = 3) in vec2 a_uv_;
        layout(location = 4) in vec3 a_tan_;
        layout(location = 5) in vec3 a_bitan_;

        //  输出
        out V_OUT_ {
            vec3 mNormal;
            vec4 mMVPPos;
            vec3 mMVPos;
            vec3 mMPos;
            mat3 mTBNR;
            mat3 mTBN;
            vec2 mUV;
        } v_out_;

        void main()
        {
            SubProgram_();
        }
        subroutine(PassProgram_) void SubProgram0()
        {
			vec4 apos       = vec4(a_v_, 1);
			v_out_.mMPos    = vec3(matrix_m_ * apos);
			gl_Position     = vec4(matrix_mvp_ * apos);
        }
        subroutine(PassProgram_) void SubProgram1()
        {
            vec4 apos = vec4(a_v_, 1);
            v_out_.mMPos = vec3(matrix_m_ * apos);
            v_out_.mMVPos = vec3(matrix_mv_ * apos);
            v_out_.mNormal = vec3(matrix_n_ * a_n_);
            v_out_.mMVPPos = vec4(matrix_mvp_ * apos);

            vec3 T = normalize(vec3(matrix_m_ * vec4(a_tan_,	0.0f)));
            vec3 B = normalize(vec3(matrix_m_ * vec4(a_bitan_,	0.0f)));
            vec3 N = normalize(vec3(matrix_m_ * vec4(a_n_,		0.0f)));
            v_out_.mTBN = mat3(T, B, N);
            v_out_.mTBNR = transpose(v_out_.mTBN);
            v_out_.mUV = a_uv_;

            gl_Position = v_out_.mMVPPos;
        }
