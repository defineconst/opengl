Common Beg
	#version 330 core

	#define LIGHT_TYPE_DIRECT_ 0
	#define LIGHT_TYPE_POINT_ 1
	#define LIGHT_TYPE_SPOT_ 2

	uniform int 	light_type_;
	uniform mat4 	matrix_mvp_;
	uniform mat4 	matrix_m_;
	uniform mat3 	matrix_n_;
Common End

Pass Beg
	DepthTest
    DepthFunc       Less
	DepthWrite
	CullFace        Front
	DrawType        Index
	RenderType      Shadow

	VShader Beg
		layout(location = 0) in vec3 a_v_;

		out V_OUT_ {
			vec3 mMPos;
		} v_out_;

		void main()
		{
			vec4 apos       = vec4(a_v_, 1);
			v_out_.mMPos    = vec3(matrix_m_ * apos);
			gl_Position     = vec4(matrix_mvp_ * apos);
		}
		VShader End

		FShader Beg

		layout (std140) uniform LightPoint_ {
			float mFar, mNear;
			float mK0, mK1, mK2;
			vec3 mAmbient;
			vec3 mDiffuse;
			vec3 mSpecular;
			vec3 mPosition;
		} light_point_;

		in V_OUT_{
			vec3 mMPos;
		} v_out_;

		void main()
		{
			switch (light_type_)
			{
			case LIGHT_TYPE_DIRECT_:
				{
					gl_FragDepth = gl_FragCoord.z;
				}
				break;
			case LIGHT_TYPE_POINT_:
				{
					vec3 normal  = v_out_.mMPos   - light_point_.mPosition;
					gl_FragDepth = length(normal) / light_point_.mFar;
				}
				break;
			case LIGHT_TYPE_SPOT_:
				{
					gl_FragDepth = gl_FragCoord.z;
				}
				break;
			}
		}
	FShader End
Pass End

Pass Beg
	CullFace 		Back
    DepthFunc       Less
	DepthTest
	DepthWrite
	RenderQueue 	Geometric
	RenderType 		Deferred
	DrawType 		Index

	VShader Beg
		layout(location = 0) in vec3 a_v_;
		layout(location = 1) in vec3 a_n_;
		layout(location = 2) in vec3 a_c_;
		layout(location = 3) in vec2 a_uv_;

		out V_OUT_ {
			vec3 mNormal;
			vec3 mMPos;
			vec2 mUV;
		} v_out_;

		void main()
		{
			v_out_.mUV      = a_uv_;

			vec4 apos       = vec4(a_v_, 1);
			v_out_.mMPos    = vec3(matrix_m_ * apos);
			v_out_.mNormal  = vec3(matrix_n_ * a_n_);
			gl_Position 	= vec4(matrix_mvp_ * apos);
		}
	VShader End

	FShader Beg
		uniform struct Material_ {
			sampler2D mNormal;
			sampler2D mDiffuse0;
		} material_;

		in V_OUT_{
			vec3 mNormal;
			vec3 mMPos;
			vec2 mUV;
		} v_out_;

        layout (location = 0) out vec3 outPosition_;
        layout (location = 1) out vec3 outDiffuse_;
        layout (location = 2) out vec3 outNormal_;

		void main()
		{
            outPosition_ = v_out_.mMPos;
            outDiffuse_  = texture(material_.mDiffuse0, v_out_.mUV).rgb;
            outNormal_   = v_out_.mNormal;
		}
	FShader End
Pass End
