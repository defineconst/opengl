Common Beg
    #version 330 core

    //  光源
    #define LIGHT_TYPE_DIRECT_ 0
    #define LIGHT_TYPE_POINT_ 1
    #define LIGHT_TYPE_SPOT_ 2

    //  矩阵/相机
    uniform vec2 view_size_;
    uniform vec3 camera_pos_;
    uniform mat4 matrix_mvp_;
    uniform mat4 matrix_mv_;
    uniform mat4 matrix_m_;
    uniform mat4 matrix_p_;
    uniform mat4 matrix_v_;
    uniform mat3 matrix_n_;

    uniform int light_count_direct_;
    uniform int light_count_point_;
    uniform int light_count_spot_;
    uniform int light_type_;

    uniform sampler2D   shadow_map_direct_0_;
    uniform sampler2D   shadow_map_direct_1_;
    uniform samplerCube shadow_map_point_0_;
    uniform samplerCube shadow_map_point_1_;
    uniform samplerCube shadow_map_point_2_;
    uniform samplerCube shadow_map_point_3_;
    uniform sampler2D   shadow_map_spot_0_;
    uniform sampler2D   shadow_map_spot_1_;
    uniform sampler2D   shadow_map_spot_2_;
    uniform sampler2D   shadow_map_spot_3_;
    uniform sampler2D   screen_sao_;

    struct LightDirectParam_ {
        mat4 mMatrix;
        vec3 mNormal;
        vec3 mAmbient;
        vec3 mDiffuse;
        vec3 mSpecular;
        vec3 mPosition;
    };

    struct LightPointParam_ {
        float mFar, mNear;
        float mK0, mK1, mK2;
        vec3 mAmbient;
        vec3 mDiffuse;
        vec3 mSpecular;
        vec3 mPosition;
    };

    struct LightSpotParam_ {
        float mK0;
        float mK1;
        float mK2;
        float mInCone;
        float mOutCone;
        mat4 mMatrix;
        vec3 mNormal;
        vec3 mAmbient;
        vec3 mDiffuse;
        vec3 mSpecular;
        vec3 mPosition;
    };

    layout (std140) uniform LightDirect_ {
        LightDirectParam_ mParam[1];
    } light_direct_;

    layout (std140) uniform LightPoint_ {
        LightPointParam_ mParam[2];
    } light_point_;

    layout (std140) uniform LightSpot_ {
        LightSpotParam_ mParam[2];
    } light_spot_;

    VShader Beg
        layout(location = 0) in vec3 a_v_;
        layout(location = 1) in vec3 a_n_;
        layout(location = 2) in vec3 a_c_;
        layout(location = 3) in vec2 a_uv_;
        layout(location = 4) in vec3 a_tan_;
        layout(location = 5) in vec3 a_bitan_;

        //  输出
        out V_OUT_ {
            vec3 mNormal;
            vec4 mMVPPos;
            vec3 mMVPos;
            vec3 mMPos;
            vec2 mUV;
        } v_out_;
    VShader End

    FShader Beg
        //  材质
        uniform struct Material_ {
            sampler2D mDiffuse0;
            sampler2D mDiffuse1;
            sampler2D mDiffuse2;
            sampler2D mDiffuse3;
        } material_;

        in V_OUT_{
            vec3 mNormal;
            vec4 mMVPPos;
            vec3 mMVPos;
            vec3 mMPos;
            vec2 mUV;
        } v_out_;

        out vec4 color_;
    FShader End
Common End

// Pass Beg
//     CullFace    Front
//     DepthTest
//     DepthFunc   Less
// 	DepthWrite
// 	RenderType  Shadow
// 	DrawType    Index

//     VShader Beg
//         void main()
//         {
// 			vec4 apos       = vec4(a_v_, 1);
// 			v_out_.mMPos    = vec3(matrix_m_ * apos);
// 			gl_Position     = vec4(matrix_mvp_ * apos);
//         }
//     VShader End

//     FShader Beg
//         void main()
//         {
//             switch (light_type_)
//             {
//             case LIGHT_TYPE_DIRECT_:
//                 {
//                     gl_FragDepth = gl_FragCoord.z;
//                 }
//                 break;
//             case LIGHT_TYPE_POINT_:
//                 {
// 					vec3 normal = v_out_.mMPos - light_point_.mParam[0].mPosition;
// 					gl_FragDepth = length(normal) / light_point_.mParam[0].mFar;
//                 }
//                 break;
//             case LIGHT_TYPE_SPOT_:
//                 {
//                     gl_FragDepth = gl_FragCoord.z;
//                 }
//                 break;
//             }
//         }
//     FShader End
// Pass End

// Pass Beg
//     CullFace    Back
//     DepthTest
// 	DepthWrite
// 	RenderType  Depth
// 	DrawType    Index

//     VShader Beg
//         void main()
//         {
//             vec4 apos       = vec4(a_v_, 1);
//             vec3 mPos       = vec3(matrix_m_ * apos);

//             vec3 front          = normalize(camera_pos_ - mPos);
//             front.y = 0; front  = normalize(front);

//             vec3 up         = vec3(0, 1, 0);
//             vec3 right      = cross(front, up);
//             up              = cross(right, front);

//             mat3 rotate     = mat3(right, up, front);
//                  apos       = vec4(rotate * a_v_, 1);
//             gl_Position     = vec4(matrix_mvp_ * apos);
//         }
//     VShader End

//     FShader Beg
//         void main()
//         {
//         }
//     FShader End
// Pass End

Pass Beg
    CullFace        Back
    DepthFunc       Less
    DepthTest
    DepthWrite
    RenderQueue     Geometric
    RenderType      Forward
    DrawType        Index

    VShader Beg
        void main()
        {
            vec4 apos       = vec4(a_v_, 1);
            vec3 mPos       = vec3(matrix_m_ * apos);

            vec3 front      = normalize(camera_pos_ - mPos);
            vec3 up         = abs(front.y) > 0.999999999999f
                            ? vec3(0, 0, 1)
                            : vec3(0, 1, 0);
            vec3 right      = cross(up, front);
            up              = cross(front, right);

            apos.xyz        = right * a_v_.x
                            + up    * a_v_.y
                            + front * a_v_.z;

            //  最终坐标
            v_out_.mMPos    = vec3(matrix_m_   * apos);
            v_out_.mNormal  = vec3(matrix_n_   * a_n_);
            v_out_.mMVPos   = vec3(matrix_mv_  * apos);
            v_out_.mMVPPos  = vec4(matrix_mvp_ * apos);
            v_out_.mUV      = a_uv_;

            gl_Position     = v_out_.mMVPPos;
        }
    VShader End

    FShader Beg
        int CheckInView(vec4 vec)
        {
            int ret = 0;
            if		(vec.x < -vec.w) ret |= 1;
            else if (vec.x >  vec.w) ret |= 2;
            else if (vec.y < -vec.w) ret |= 4;
            else if (vec.y >  vec.w) ret |= 8;
            else if (vec.z < -vec.w) ret |= 16;
            else if (vec.z >  vec.w) ret |= 32;
            return ret;
        }

        float CalculateDirectShadow(const int i, const sampler2D shadowMap)
        {
            vec4 pos = light_direct_.mParam[i].mMatrix * vec4(v_out_.mMPos, 1);
            if (CheckInView(pos) != 0) { return 0; }
            pos.xyz = pos.xyz / pos.w * 0.5f + 0.5f;
			float zorder = pos.z - 0.001f;
            float shadow = 0.0f;
            vec2 texstep = 1.0f / textureSize(shadowMap, 0);
            float depth = texture(shadowMap, pos.xy + vec2(-texstep.x,  texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( 0,          texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( texstep.x,  texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2(-texstep.x,  0		 )).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( 0,          0	     )).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( texstep.x,  0	     )).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2(-texstep.x, -texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( 0,		   -texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( texstep.x, -texstep.y)).r; shadow += zorder < depth? 1: 0;
            return shadow / 9.0f;
        }

		float CalculateSpotShadow(const int i, const sampler2D shadowMap)
		{
			vec4 pos = light_spot_.mParam[i].mMatrix * vec4(v_out_.mMPos, 1);
            if (CheckInView(pos) != 0) { return 0; }
            pos.xyz = pos.xyz / pos.w * 0.5f + 0.5f;
			float zorder = pos.z - 0.001f;
            float shadow = 0.0f;
            vec2 texstep = 1.0f / textureSize(shadowMap, 0);
            float depth = texture(shadowMap, pos.xy + vec2(-texstep.x,  texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( 0,          texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( texstep.x,  texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2(-texstep.x,  0        )).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( 0,          0        )).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( texstep.x,  0        )).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2(-texstep.x, -texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( 0,		   -texstep.y)).r; shadow += zorder < depth? 1: 0;
                  depth = texture(shadowMap, pos.xy + vec2( texstep.x, -texstep.y)).r; shadow += zorder < depth? 1: 0;
            return shadow / 9.0f;
		}

		float CalculatePointShadow(const int i, const samplerCube shadowMap)
		{
			vec3 normal 	= v_out_.mMPos - light_point_.mParam[i].mPosition;
			float zorder 	= texture(shadowMap, normal).r;
			return length(normal) > zorder * light_point_.mParam[i].mFar + 1? 0: 1;
		}

        //	计算漫反射缩放因子
        float CalculateDiffuseScale(vec3 fragNormal, vec3 lightNormal, vec3 cameraNormal)
        {
            float v = max(dot(fragNormal, lightNormal), 0) * 0.5f + 0.5f;
            if (v < 0.55)       return 0.0;
            else if (v < 0.80)  return 0.5;
            else                return 1;
        }

        //	计算距离衰减缩放因子
        float CalculateDistanceScale(vec3 fragPosition, vec3 lightPosition, float k0, float k1, float k2)
        {
            float len = length(fragPosition - lightPosition);
            return 1.0f / (k0 + k1 * len + k2 * len * len);
        }

        //	计算外锥衰减缩放因子
        float CalculateOutConeScale(float inCone, float outCone, vec3 lightNormal, vec3 lightToFrag)
        {
            float cone = dot(lightNormal, lightToFrag);
            return clamp((cone - outCone) / (inCone - outCone), 0, 1);
        }

        vec3 CalculateDirect(const int i, const vec3 fragNormal, const vec3 cameraNormal, const vec2 uv, const float ssao)
        {
            float shadow = 0;
			switch (i)
			{
			case 0: shadow = CalculateDirectShadow(i, shadow_map_direct_0_); break;
			case 1: shadow = CalculateDirectShadow(i, shadow_map_direct_0_); break;
			}

            float diff   = CalculateDiffuseScale(fragNormal, -light_direct_.mParam[i].mNormal, cameraNormal);
            vec3 ambient = light_direct_.mParam[i].mAmbient * texture(material_.mDiffuse0, uv).rgb;
            vec3 diffuse = light_direct_.mParam[i].mDiffuse * texture(material_.mDiffuse0, uv).rgb * diff;
            return ambient * (1 - ssao) + diffuse * shadow * 1;
        }

        vec3 CalculatePoint(const int i, const vec3 fragNormal, const vec3 cameraNormal, const vec2 uv, const float ssao)
        {
            float shadow = 0;
			switch (i)
			{
			case 0: shadow = CalculatePointShadow(i, shadow_map_point_0_); break;
			case 1: shadow = CalculatePointShadow(i, shadow_map_point_1_); break;
			case 2: shadow = CalculatePointShadow(i, shadow_map_point_2_); break;
			case 3: shadow = CalculatePointShadow(i, shadow_map_point_3_); break;
			}

            vec3 fragToLight = normalize(light_point_.mParam[i].mPosition - v_out_.mMPos);

            float diff   = CalculateDiffuseScale(fragNormal, fragToLight, cameraNormal);
            vec3 ambient = light_point_.mParam[i].mAmbient * texture(material_.mDiffuse0, uv).rgb;
            vec3 diffuse = light_point_.mParam[i].mDiffuse * texture(material_.mDiffuse0, uv).rgb * diff;
            //	距离衰减
            float distance = CalculateDistanceScale(v_out_.mMPos, 
                                                    light_point_.mParam[i].mPosition, 
                                                    light_point_.mParam[i].mK0, 
                                                    light_point_.mParam[i].mK1,
                                                    light_point_.mParam[i].mK2);
            return (ambient * (1 - ssao) + diffuse * shadow) * distance;
        }

        vec3 CalculateSpot(const int i, const vec3 fragNormal, const vec3 cameraNormal, const vec2 uv, const float ssao)
        {
            float shadow = 0;
			switch (i)
			{
			case 0: shadow = CalculateSpotShadow(i, shadow_map_spot_0_); break;
			case 1: shadow = CalculateSpotShadow(i, shadow_map_spot_1_); break;
			case 2: shadow = CalculateSpotShadow(i, shadow_map_spot_2_); break;
			case 3: shadow = CalculateSpotShadow(i, shadow_map_spot_3_); break;
			}

            vec3 fragToLight = normalize(light_spot_.mParam[i].mPosition - v_out_.mMPos);

            float diff   = CalculateDiffuseScale(fragNormal, fragToLight, cameraNormal);
            vec3 ambient = light_spot_.mParam[i].mAmbient * texture(material_.mDiffuse0, uv).rgb;
            vec3 diffuse = light_spot_.mParam[i].mDiffuse * texture(material_.mDiffuse0, uv).rgb * diff;
            //	光锥衰减
            float weight = CalculateOutConeScale(light_spot_.mParam[i].mInCone, 
                                                    light_spot_.mParam[i].mOutCone, 
                                                    light_spot_.mParam[i].mNormal, -fragToLight);
            //	距离衰减
            float distance = CalculateDistanceScale(v_out_.mMPos, 
                                                    light_spot_.mParam[i].mPosition, 
                                                    light_spot_.mParam[i].mK0, 
                                                    light_spot_.mParam[i].mK1, 
                                                    light_spot_.mParam[i].mK2);

            return (ambient * (1 - ssao) + diffuse * shadow) * weight * distance;
        }

        void main()
        {
            vec2 screenUV     = vec2(gl_FragCoord.x / view_size_.x,
                                     gl_FragCoord.y / view_size_.y);
            float screenSao   = texture(screen_sao_, screenUV).r;
            vec3 cameraNormal = normalize(camera_pos_ - v_out_.mMPos);

            vec3 outColor = vec3(0, 0, 0);
            for (int i = 0; i != light_count_direct_; ++i)
            {
                outColor += CalculateDirect(i, v_out_.mNormal, cameraNormal, v_out_.mUV, screenSao);
            }

            for (int i = 0; i != light_count_point_; ++i)
            {
                outColor += CalculatePoint(i, v_out_.mNormal, cameraNormal, v_out_.mUV, screenSao);
            }

            for (int i = 0; i != light_count_spot_; ++i)
            {
                outColor += CalculateSpot(i, v_out_.mNormal, cameraNormal, v_out_.mUV, screenSao);
            }

            color_ = vec4(outColor, 1);
        }
    FShader End
Pass End
