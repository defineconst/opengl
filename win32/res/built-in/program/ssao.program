Common Beg
#version 330 core
Common End

Pass Beg
	CullFace Back
	RenderQueue Geometric
	RenderType SSAO
	DrawType Index

    VShader Beg
		layout(location = 0) in vec3 a_v_;
		layout(location = 1) in vec2 a_uv_;

		uniform mat4 matrix_mvp_;
		uniform mat4 matrix_m_;

        out V_OUT_ {
            vec2 mUV;
        } v_out_;

		void main()
		{
            v_out_.mUV  = a_uv_;
			gl_Position = vec4(a_v_, 1);
		}
	VShader End

    FShader Beg
        uniform mat4 matrix_mvp_;
		uniform mat4 matrix_v_;
		uniform mat4 matrix_p_;
		uniform float camera_f_;
		uniform float camera_n_;

        uniform sampler2D screen_depth_;
        uniform sampler2D screen_position_;
		
        //  球形采样偏移数据
        vec3 samples[] = vec3[](
            vec3(  0,            1,              0           ),
            vec3(  0,            0.707107,       0.707107    ),
            vec3(  0.5,          0.707107,       0.5         ),
            vec3(  0.707107,     0.707107,      -3.09086e-08 ),
            vec3(  0.5,          0.707107,      -0.5         ),
            vec3( -6.18172e-08,  0.707107,      -0.707107    ),
            vec3( -0.5,          0.707107,      -0.5         ),
            vec3( -0.707107,     0.707107,       8.43216e-09 ),
            vec3( -0.5,          0.707107,       0.5         ),
            vec3(  0,           -4.37114e-08,    1           ),
            vec3(  0.707107,    -4.37114e-08,    0.707107    ),
            vec3(  1,           -4.37114e-08,   -4.37114e-08 ),
            vec3(  0.707107,    -4.37114e-08,   -0.707107    ),
            vec3( -8.74228e-08, -4.37114e-08,   -1           ),
            vec3( -0.707107,    -4.37114e-08,   -0.707107    ),
            vec3( -1,           -4.37114e-08,    1.19249e-08 ),
            vec3( -0.707107,    -4.37114e-08,    0.707107    ),
            vec3(  0,           -0.707107,       0.707107    ),
            vec3(  0.5,         -0.707107,       0.5         ),
            vec3(  0.707107,    -0.707107,      -3.09086e-08 ),
            vec3(  0.5,         -0.707107,      -0.5         ),
            vec3( -6.18172e-08, -0.707107,      -0.707107    ),
            vec3( -0.5,         -0.707107,      -0.5         ),
            vec3( -0.707107,    -0.707107,       8.43216e-09 ),
            vec3( -0.5,         -0.707107,       0.5         ),
            vec3(  0,           -1,              0           )
		);

        in V_OUT_ {
            vec2 mUV;
        } v_out_;

        out vec4 color_;

        float DepthToLiner(float depth)
        {
            float z = depth * 2.0 - 1.0;
            return (2.0 * camera_n_ * camera_f_)
                 / (camera_f_ + camera_n_ - z
                 * (camera_f_ - camera_n_));
        }

		void main()
		{
            // vec3 mpos = texture(screen_position_, v_out_.uv).xyz;
            // float weight= 0;
            // float depth = DepthToLiner(gl_FragCoord.z);
            // for (int i = 0; i != samples.length(); ++i)
            // {
            //     vec4 pos = vec4(mpos + samples[i], 1);
            //     if ((matrix_v_ * pos).z > depth) { ++weight; }
            // }
            // color_.r = vec4(1 - weight / samples.length(), 0, 0, 1);
            color_.r = texture(screen_depth_, v_out_.mUV).r;
		}
	FShader End
Pass End