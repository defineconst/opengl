Common Beg
    #version 400 core
    subroutine void PassProgram_();
    subroutine uniform PassProgram_ SubProgram_;

    VShader Beg
        layout(location = 0) in vec3 a_pos_;
        layout(location = 1) in vec2 a_uv_;
        layout(location = 2) in vec3 a_n_;
        layout(location = 3) in vec3 a_t_;
        layout(location = 4) in vec3 a_b_;

        uniform vec3 camera_pos_;
        uniform vec3 camera_eye_;
        uniform mat4 matrix_mvp_;
        uniform mat4 matrix_mv_;
        uniform mat4 matrix_m_;
        uniform mat4 matrix_p_;
        uniform mat4 matrix_v_;
        uniform mat3 matrix_n_;

        out V_OUT_ {
            vec3 mNormal;
            vec4 mMVPPos;
            vec3 mMVPos;
            vec3 mMPos;
            mat3 mTBNR;
            mat3 mTBN;
            vec2 mUV;
        } v_out_;

        void main()
        {
            SubProgram_();
        }

    VShader End

    FShader Beg
        struct LightDirectParam_ {
            mat4 mMatrix;
            vec3 mNormal;
            vec3 mAmbient;
            vec3 mDiffuse;
            vec3 mSpecular;
            vec3 mPosition;
        };

        struct LightPointParam_ {
            float mFar, mNear;
            float mK0, mK1, mK2;
            vec3 mAmbient;
            vec3 mDiffuse;
            vec3 mSpecular;
            vec3 mPosition;
        };

        struct LightSpotParam_ {
            float mK0;
            float mK1;
            float mK2;
            float mInCone;
            float mOutCone;
            mat4 mMatrix;
            vec3 mNormal;
            vec3 mAmbient;
            vec3 mDiffuse;
            vec3 mSpecular;
            vec3 mPosition;
        };

        layout (std140) uniform LightDirect_ {
            LightDirectParam_ mParam[2];
        } light_direct_;

        layout (std140) uniform LightPoint_ {
            LightPointParam_ mParam[4];
        } light_point_;

        layout (std140) uniform LightSpot_ {
            LightSpotParam_ mParam[4];
        } light_spot_;

        uniform int light_count_direct_;
        uniform int light_count_point_;
        uniform int light_count_spot_;

        uniform vec3 camera_pos_;
        uniform vec3 camera_eye_;

        uniform struct Material_ {
            float mShininess;
            sampler2D mNormal;
            sampler2D mSpecular;
            sampler2D mDiffuse0;
            sampler2D mDiffuse1;
            sampler2D mDiffuse2;
            sampler2D mDiffuse3;
        } material_;

        in V_OUT_{
            vec3 mNormal;
            vec4 mMVPPos;
            vec3 mMVPos;
            vec3 mMPos;
            mat3 mTBNR;
            mat3 mTBN;
            vec2 mUV;
        } v_out_;

        out vec4 color_;

        void main()
        {
            SubProgram_();
        }
    FShader End
Common End

Pass Beg
    CullFace Back
    DepthTest
    DepthWrite
    RenderQueue Geometric
    RenderType Forward
    DrawType Index
    PassName SubProgram0

    VShader Beg
        subroutine(PassProgram_) void SubProgram0()
        {
            vec4 apos = vec4(a_pos_, 1);
            v_out_.mMPos = vec3(matrix_m_ * apos);
            v_out_.mMVPos = vec3(matrix_mv_ * apos);
            v_out_.mNormal = vec3(matrix_n_ * a_n_);
            v_out_.mMVPPos = vec4(matrix_mvp_ * apos);

            vec3 T = normalize(vec3(matrix_m_ * vec4(a_t_, 0.0f)));
            vec3 B = normalize(vec3(matrix_m_ * vec4(a_b_, 0.0f)));
            vec3 N = normalize(vec3(matrix_m_ * vec4(a_n_, 0.0f)));
            v_out_.mTBN = mat3(T, B, N);
            v_out_.mTBNR = transpose(v_out_.mTBN);
            v_out_.mUV = a_uv_;

            gl_Position = v_out_.mMVPPos;
        }
    VShader End

    FShader Beg
        //	计算漫反射缩放因子
        float CalculateDiffuseScale(vec3 fragNormal, vec3 lightNormal, vec3 cameraNormal)
        {
            return max(dot(fragNormal, lightNormal), 0);
        }

        //	计算镜面反射缩放因子
        float CalculateSpecularScale(vec3 fragNormal, vec3 lightNormal, vec3 cameraNormal)
        {
            vec3 h = (lightNormal + cameraNormal) * 0.5f;
            return pow(max(dot(fragNormal, h), 0), material_.mShininess);
        }

        //	计算距离衰减缩放因子
        float CalculateDistanceScale(vec3 fragPosition, vec3 lightPosition, float k0, float k1, float k2)
        {
            float len = length(fragPosition - lightPosition);
            return 1.0f / (k0 + k1 * len + k2 * len * len);
        }

        //	计算外锥衰减缩放因子
        float CalculateOutConeScale(float inCone, float outCone, vec3 lightNormal, vec3 lightToFrag)
        {
            float cone = dot(lightNormal, lightToFrag);
            return clamp((cone - outCone) / (inCone - outCone), 0, 1);
        }

        vec3 CalculateDirect(const int i, vec3 fragNormal, vec3 cameraNormal, vec2 uv)
        {
            float diff = CalculateDiffuseScale(fragNormal, -light_direct_.mParam[i].mNormal, cameraNormal);
            float spec = CalculateSpecularScale(fragNormal, -light_direct_.mParam[i].mNormal, cameraNormal);

            vec3 ambient = light_direct_.mParam[i].mAmbient * texture(material_.mDiffuse0, uv).rgb;
            vec3 diffuse = light_direct_.mParam[i].mDiffuse * texture(material_.mDiffuse0, uv).rgb * diff;
            vec3 specular = light_direct_.mParam[i].mSpecular * texture(material_.mSpecular, uv).rgb * spec;
            return ambient + (diffuse + specular);
        }

        vec3 CalculatePoint(const int i, vec3 fragNormal, vec3 cameraNormal, vec2 uv)
        {
            vec3 fragToLight = normalize(light_point_.mParam[i].mPosition - v_out_.mMPos);

            float diff = CalculateDiffuseScale(fragNormal, fragToLight, cameraNormal);
            float spec = CalculateSpecularScale(fragNormal, fragToLight, cameraNormal);

            vec3 ambient = light_point_.mParam[i].mAmbient * texture(material_.mDiffuse0, uv).rgb;
            vec3 diffuse = light_point_.mParam[i].mDiffuse * texture(material_.mDiffuse0, uv).rgb * diff;
            vec3 specular = light_point_.mParam[i].mSpecular * texture(material_.mSpecular, uv).rgb * spec;

            //	距离衰减
            float distance = CalculateDistanceScale(v_out_.mMPos, 
                                                    light_point_.mParam[i].mPosition, 
                                                    light_point_.mParam[i].mK0, 
                                                    light_point_.mParam[i].mK1,
                                                    light_point_.mParam[i].mK2);

            return (ambient + (diffuse + specular)) * distance;
        }

        vec3 CalculateSpot(const int i, vec3 fragNormal, vec3 cameraNormal, vec2 uv)
        {
            vec3 fragToLight = normalize(light_spot_.mParam[i].mPosition - v_out_.mMPos);

            float diff = CalculateDiffuseScale(fragNormal, fragToLight, cameraNormal);
            float spec = CalculateSpecularScale(fragNormal, fragToLight, cameraNormal);

            vec3 ambient = light_spot_.mParam[i].mAmbient * texture(material_.mDiffuse0, uv).rgb;
            vec3 diffuse = light_spot_.mParam[i].mDiffuse * texture(material_.mDiffuse0, uv).rgb * diff;
            vec3 specular = light_spot_.mParam[i].mSpecular * texture(material_.mSpecular, uv).rgb * spec;

            //	光锥衰减
            float weight = CalculateOutConeScale(light_spot_.mParam[i].mInCone, 
                                                    light_spot_.mParam[i].mOutCone, 
                                                    light_spot_.mParam[i].mNormal, -fragToLight);

            //	距离衰减
            float distance = CalculateDistanceScale(v_out_.mMPos, 
                                                    light_spot_.mParam[i].mPosition, 
                                                    light_spot_.mParam[i].mK0, 
                                                    light_spot_.mParam[i].mK1, 
                                                    light_spot_.mParam[i].mK2);

            return (ambient + (diffuse + specular)) * weight * distance;
        }

        subroutine(PassProgram_) void SubProgram0()
        {
            vec3 cameraNormal = normalize(camera_pos_ - v_out_.mMPos);

            vec3 fragNormal = vec3(texture(material_.mNormal, v_out_.mUV));
                 fragNormal = v_out_.mTBN * normalize(fragNormal *2 - 1.0);

            vec3 outColor = vec3(0, 0, 0);
            for (int i = 0; i != light_count_direct_; ++i)
            {
                outColor += CalculateDirect(i, fragNormal, cameraNormal, v_out_.mUV);
            }

            for (int i = 0; i != light_count_point_; ++i)
            {
                outColor += CalculatePoint(i, fragNormal, cameraNormal, v_out_.mUV);
            }

            for (int i = 0; i != light_count_spot_; ++i)
            {
                outColor += CalculateSpot(i, fragNormal, cameraNormal, v_out_.mUV);
            }

            color_ = vec4(texture(material_.mDiffuse0, v_out_.mUV).rgb, 1.0f);
        }
    FShader End
Pass End
