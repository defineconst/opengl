Common Beg
#version 330 core
Common End

Pass Beg
#include res/built-in/program/shadow.inc
Pass End

Pass Beg
	CullFace Back
	DepthTest
	DepthWrite
	RenderQueue Geometric
	RenderType Deferred
	DrawType Index

	VShader Beg
		layout(location = 0) in vec3 a_v_;
		layout(location = 1) in vec3 a_n_;
		layout(location = 2) in vec3 a_c_;
		layout(location = 3) in vec2 a_uv_;
		layout(location = 4) in vec3 a_tan_;
		layout(location = 5) in vec3 a_bitan_;

		uniform vec3 camera_pos_;
		uniform vec3 camera_eye_;
		uniform mat4 matrix_mvp_;
		uniform mat4 matrix_mv_;
		uniform mat4 matrix_m_;
		uniform mat4 matrix_p_;
		uniform mat4 matrix_v_;
		uniform mat3 matrix_n_;

		out V_OUT_ {
			vec3 mNormal;
			vec4 mMVPPos;
			vec3 mMVPos;
			vec3 mMPos;
			mat3 mTBN;
			vec2 mUV;
		} v_out_;

		void main()
		{
			vec4 apos       = vec4(a_v_, 1);
			v_out_.mUV      = a_uv_;
			v_out_.mMPos    = vec3(matrix_m_ * apos);
			v_out_.mMVPos   = vec3(matrix_mv_ * apos);
			v_out_.mNormal  = vec3(matrix_n_ * a_n_);
			v_out_.mMVPPos  = vec4(matrix_mvp_ * apos);

			vec3 T = normalize(vec3(matrix_m_ * vec4(a_tan_,    0.0f)));
			vec3 B = normalize(vec3(matrix_m_ * vec4(a_bitan_,  0.0f)));
			vec3 N = normalize(vec3(matrix_m_ * vec4(a_n_,      0.0f)));
			v_out_.mTBN = mat3(T, B, N);

			gl_Position = v_out_.mMVPPos;
		}
	VShader End

	FShader Beg
		uniform vec3 camera_pos_;
		uniform vec3 camera_eye_;

		uniform struct Material_ {
			float mShininess;
			sampler2D mNormal;
			sampler2D mSpecular;
			sampler2D mDiffuse0;
		} material_;

		in V_OUT_{
			vec3 mNormal;
			vec4 mMVPPos;
			vec3 mMVPos;
			vec3 mMPos;
			mat3 mTBN;
			vec2 mUV;
		} v_out_;

        layout (location = 0) out vec3 outPosition_;
        layout (location = 1) out vec4 outSpecular_;
        layout (location = 2) out vec3 outDiffuse_;
        layout (location = 3) out vec3 outNormal_;

		void main()
		{
            outPosition_        = v_out_.mMPos;

            outSpecular_.rgb    = texture(material_.mSpecular, v_out_.mUV).rgb;
            outSpecular_.a      = material_.mShininess;

            outDiffuse_         = texture(material_.mDiffuse0, v_out_.mUV).rgb;

            outNormal_          = vec3(texture(material_.mNormal, v_out_.mUV));
		    outNormal_          = v_out_.mTBN * normalize(outNormal_ * 2.0 -1);
		}
	FShader End
Pass End

Pass Beg
	CullFace Back
	DepthTest
	DepthWrite
	RenderQueue Geometric
	RenderType SSAO
	DrawType Index

    VShader Beg
		layout(location = 0) in vec3 a_v_;

		uniform mat4 matrix_mvp_;
		uniform mat4 matrix_m_;

		out V_OUT_ {
			vec4 mMVPPos;
			vec3 mMPos;
		} v_out_;

		void main()
		{
			vec4 apos       = vec4(a_v_, 1);
			v_out_.mMPos    = vec3(matrix_m_    * apos);
			v_out_.mMVPPos  = vec4(matrix_mvp_  * apos);
			gl_Position = v_out_.mMVPPos;
		}
	VShader End

    FShader Beg
        uniform mat4 matrix_mvp_;
		uniform mat4 matrix_v_;
		uniform mat4 matrix_p_;
		
        //  球形采样偏移数据
        vec3 samples[] = {
            {  0,            1,              0           },
            {  0,            0.707107,       0.707107    },
            {  0.5,          0.707107,       0.5         },
            {  0.707107,     0.707107,      -3.09086e-08 },
            {  0.5,          0.707107,      -0.5         },
            { -6.18172e-08,  0.707107,      -0.707107    },
            { -0.5,          0.707107,      -0.5         },
            { -0.707107,     0.707107,       8.43216e-09 },
            { -0.5,          0.707107,       0.5         },
            {  0,           -4.37114e-08,    1           },
            {  0.707107,    -4.37114e-08,    0.707107    },
            {  1,           -4.37114e-08,   -4.37114e-08 },
            {  0.707107,    -4.37114e-08,   -0.707107    },
            { -8.74228e-08, -4.37114e-08,   -1           },
            { -0.707107,    -4.37114e-08,   -0.707107    },
            { -1,           -4.37114e-08,    1.19249e-08 },
            { -0.707107,    -4.37114e-08,    0.707107    },
            {  0,           -0.707107,       0.707107    },
            {  0.5,         -0.707107,       0.5         },
            {  0.707107,    -0.707107,      -3.09086e-08 },
            {  0.5,         -0.707107,      -0.5         },
            { -6.18172e-08, -0.707107,      -0.707107    },
            { -0.5,         -0.707107,      -0.5         },
            { -0.707107,    -0.707107,       8.43216e-09 },
            { -0.5,         -0.707107,       0.5         },
            {  0,           -1,              0           },
        };

        in V_OUT_{
			vec4 mMVPPos;
			vec3 mMPos;
		} v_out_;

        out vec4 color_;

        float DepthToLiner(float depth)
        {
            float z = depth * 2.0 - 1.0;
            return (2.0 * camera_n_ * camera_f_)
                 / (camera_f_ + camera_n_ - z
                 * (camera_f_ - camera_n_));
        }

		void main()
		{
            //  TODO
            float depth = DepthToLiner(gl_Position.z);

            float weight = 0;
            for (int i = 0; i != length(samples); ++i)
            {
                vec4 pos = vec4(v_out_.mMPos + samples[i], 1);
                pos = matrix_v_ * pos;
                if (pos.z > depth)
                {
                    ++weight;
                }
            }
            v_out_.mMPos
		}
	FShader End
Pass End